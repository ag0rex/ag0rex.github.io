;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{empty? inspect}, :name ankha.core, :imports nil, :requires {object goog.object, dom om.dom, om.dom om.dom, goog.object goog.object, string clojure.string, om.core om.core, om om.core, clojure.string clojure.string, cljs.reader cljs.reader, reader cljs.reader}, :uses nil, :defs {enter-key? {:protocol-inline nil, :meta {:arglists (quote ([e])), :end-column 17, :end-line 145, :column 7, :line 145, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/enter-key?, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 17, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :test true}, -inspect {:protocol-inline nil, :meta {:arglists (quote ([this])), :doc "Return a React or Om compatible representation of this.", :protocol ankha.core/IInspect, :end-column 12, :end-line 16, :column 4, :line 16, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :protocol ankha.core/IInspect, :name ankha.core/-inspect, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return a React or Om compatible representation of this.", :test true}, t20860 {:num-fields 7, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name ankha.core/t20860, :file "resources/public/js/compiled/out/ankha/core.cljs", :type true, :anonymous true, :column 6, :line 245, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, IInspect {:meta {:protocol-info {:methods {-inspect [[this]]}}, :protocol-symbol true, :doc nil, :end-column 22, :end-line 15, :column 14, :line 15, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :protocol-symbol true, :name ankha.core/IInspect, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 22, :column 1, :line 15, :protocol-info {:methods {-inspect [[this]]}}, :info nil, :end-line 15, :impls #{nil cljs.core/PersistentHashMap js/RegExp boolean object cljs.core/PersistentArrayMap js/Date cljs.core/Keyword cljs.core/LazySeq om.core/MapCursor cljs.core/ValSeq number cljs.core/PersistentArrayMapSeq cljs.core/PersistentVector cljs.core/List array string cljs.core/PersistentHashSet function cljs.core/KeySeq cljs.core/PersistentTreeSet cljs.core/Symbol cljs.core/UUID om.core/IndexedCursor cljs.core/Range}, :doc nil, :test true}, empty? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Return true if x is an empty js/Object or empty Clojure collection.", :private true, :end-column 14, :end-line 22, :column 8, :line 22, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :private true, :name ankha.core/empty?, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return true if x is an empty js/Object or empty Clojure collection.", :test true}, record-name {:protocol-inline nil, :meta {:arglists (quote ([r])), :doc "Return the name of a Record type.", :end-column 18, :end-line 34, :column 7, :line 34, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/record-name, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 18, :method-params ([r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([r])), :doc "Return the name of a Record type.", :test true}, collection-view {:protocol-inline nil, :meta {:arglists (quote ([data owner {:keys [class opener closer], :as opts}])), :end-column 22, :end-line 173, :column 7, :line 173, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/collection-view, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 22, :method-params ([data owner p__20841]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data owner {:keys [class opener closer], :as opts}])), :test true}, inspector {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 3, :method-params ([data owner] [data owner {:keys [class], :or {class "inspector"}, :as opts}]), :arglists ([data owner] [data owner {:keys [class], :or {class "inspector"}, :as opts}]), :arglists-meta (nil nil)}, :arglists (quote ([data owner] [data owner {:keys [class], :or {class "inspector"}, :as opts}])), :end-column 16, :end-line 241, :column 7, :line 241, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/inspector, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([data owner] [data owner {:keys [class], :or {class "inspector"}, :as opts}]), :arglists ([data owner] [data owner {:keys [class], :or {class "inspector"}, :as opts}]), :arglists-meta (nil nil)}, :method-params ([data owner] [data owner {:keys [class], :or {class "inspector"}, :as opts}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 3, :fn-var true, :arglists ([data owner] [data owner {:keys [class], :or {class "inspector"}, :as opts}]), :test true}, inspect {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 14, :end-line 58, :column 7, :line 58, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/inspect, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, t20850 {:num-fields 10, :protocols #{om.core/IRenderState om.core/IDidUpdate cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name ankha.core/t20850, :file "resources/public/js/compiled/out/ankha/core.cljs", :type true, :anonymous true, :column 3, :line 175, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, record? {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc "Return true if x satisfies IRecord, false otherwise.", :private true, :end-column 15, :end-line 29, :column 8, :line 29, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :private true, :name ankha.core/record?, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return true if x satisfies IRecord, false otherwise.", :test true}, sequential->dom {:protocol-inline nil, :meta {:arglists (quote ([data])), :end-column 22, :end-line 85, :column 7, :line 85, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/sequential->dom, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 22, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, associative->dom {:protocol-inline nil, :meta {:arglists (quote ([data {:keys [entry-class key-class val-class]}])), :end-column 23, :end-line 67, :column 7, :line 67, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/associative->dom, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 23, :method-params ([data p__20795]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data {:keys [entry-class key-class val-class]}])), :test true}, coll-view {:protocol-inline nil, :meta {:arglists (quote ([data opener closer class])), :end-column 16, :end-line 54, :column 7, :line 54, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/coll-view, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 16, :method-params ([data opener closer class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 4, :fn-var true, :arglists (quote ([data opener closer class])), :test true}, edit-button {:protocol-inline nil, :meta {:arglists (quote ([owner {:keys [disable? save-editor open-editor]}])), :private true, :end-column 19, :end-line 126, :column 8, :line 126, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :private true, :name ankha.core/edit-button, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 19, :method-params ([owner p__20835]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([owner {:keys [disable? save-editor open-editor]}])), :test true}, toggle-button {:protocol-inline nil, :meta {:arglists (quote ([owner {:keys [disable?]}])), :private true, :end-column 21, :end-line 109, :column 8, :line 109, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :private true, :name ankha.core/toggle-button, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 21, :method-params ([owner p__20832]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([owner {:keys [disable?]}])), :test true}, t20843 {:num-fields 10, :protocols #{om.core/IRenderState om.core/IDidUpdate cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name ankha.core/t20843, :file "resources/public/js/compiled/out/ankha/core.cljs", :type true, :anonymous true, :column 3, :line 175, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, escape-key? {:protocol-inline nil, :meta {:arglists (quote ([e])), :end-column 18, :end-line 148, :column 7, :line 148, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/escape-key?, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 18, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :test true}, ->t20860 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([class opts map__20859 p__20858 owner data meta20861])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name ankha.core/->t20860, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :method-params ([class opts map__20859 p__20858 owner data meta20861]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 245, :max-fixed-arity 7, :fn-var true, :arglists (quote ([class opts map__20859 p__20858 owner data meta20861])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t20850 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([class opener closer opts map__20849 p__20841 owner data collection-view meta20851])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{om.core/IRenderState om.core/IDidUpdate cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :anonymous true}, :protocols #{om.core/IRenderState om.core/IDidUpdate cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name ankha.core/->t20850, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :method-params ([class opener closer opts map__20849 p__20841 owner data collection-view meta20851]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 175, :max-fixed-arity 10, :fn-var true, :arglists (quote ([class opener closer opts map__20849 p__20841 owner data collection-view meta20851])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, literal {:protocol-inline nil, :meta {:arglists (quote ([class x])), :end-column 14, :end-line 50, :column 7, :line 50, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/literal, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 14, :method-params ([class x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([class x])), :test true}, coll->dom {:protocol-inline nil, :meta {:arglists (quote ([data])), :end-column 16, :end-line 92, :column 7, :line 92, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/coll->dom, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 16, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, editor {:protocol-inline nil, :meta {:arglists (quote ([owner {:keys [value save-editor cancel-editor error-message]}])), :private true, :end-column 14, :end-line 151, :column 8, :line 151, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :private true, :name ankha.core/editor, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 14, :method-params ([owner p__20838]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([owner {:keys [value save-editor cancel-editor error-message]}])), :test true}, record-opener {:protocol-inline nil, :meta {:arglists (quote ([r])), :doc "Return an opener for a Record type.", :end-column 20, :end-line 40, :column 7, :line 40, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/ankha/core.cljs"}, :name ankha.core/record-opener, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :end-column 20, :method-params ([r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([r])), :doc "Return an opener for a Record type.", :test true}, ->t20843 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([class opener closer opts map__20842 p__20841 owner data collection-view meta20844])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{om.core/IRenderState om.core/IDidUpdate cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :anonymous true}, :protocols #{om.core/IRenderState om.core/IDidUpdate cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name ankha.core/->t20843, :variadic false, :file "resources/public/js/compiled/out/ankha/core.cljs", :method-params ([class opener closer opts map__20842 p__20841 owner data collection-view meta20844]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 175, :max-fixed-arity 10, :fn-var true, :arglists (quote ([class opener closer opts map__20842 p__20841 owner data collection-view meta20844])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}}, :require-macros {dom om.dom, om.dom om.dom, om.core om.core, om om.core}, :cljs.analyzer/constants {:order [:opts :opener :closer :class :else :val-class :key-class :entry-class :disable? :open? :open-editor :save-editor :editing? :error-message :cancel-editor :value :edited-data :editing-error-message :vacant?], :seen #{:editing? :closer :disable? :entry-class :vacant? :else :editing-error-message :value :save-editor :open-editor :class :open? :opts :cancel-editor :val-class :opener :key-class :edited-data :error-message}}, :doc nil}