;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name fipp.edn, :imports nil, :requires {fipp.engine fipp.engine, fipp.visit fipp.visit, fipp.ednize fipp.ednize}, :uses {-edn fipp.ednize, pprint-document fipp.engine, visit* fipp.visit, visit fipp.visit}, :defs {pprint {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x options]), :arglists ([x] [x options]), :arglists-meta (nil nil)}, :arglists (quote ([x] [x options])), :end-column 13, :end-line 76, :column 7, :line 76, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/edn.cljc"}, :name fipp.edn/pprint, :variadic false, :file "resources/public/js/compiled/out/fipp/edn.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x options]), :arglists ([x] [x options]), :arglists-meta (nil nil)}, :method-params ([x] [x options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x options]), :test true}, map->EdnPrinter {:protocol-inline nil, :meta {:arglists (quote ([G__24768])), :factory :map, :internal-ctor true, :end-column 22, :end-line 8, :column 12, :line 8, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/edn.cljc"}, :name fipp.edn/map->EdnPrinter, :variadic false, :file "resources/public/js/compiled/out/fipp/edn.cljc", :end-column 22, :method-params ([G__24768]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__24768])), :test true}, ->EdnPrinter {:protocol-inline nil, :meta {:arglists (quote ([print-meta symbols])), :factory :positional, :internal-ctor true, :end-column 22, :end-line 8, :column 12, :line 8, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/edn.cljc"}, :name fipp.edn/->EdnPrinter, :variadic false, :file "resources/public/js/compiled/out/fipp/edn.cljc", :end-column 22, :method-params ([print-meta symbols]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([print-meta symbols])), :test true}, EdnPrinter {:num-fields 2, :protocols #{cljs.core/IRecord fipp/visit.IVisitor cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name fipp.edn/EdnPrinter, :file "resources/public/js/compiled/out/fipp/edn.cljc", :end-column 22, :type true, :column 12, :internal-ctor true, :line 8, :record true, :end-line 8, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :require-macros nil, :cljs.analyzer/constants {:order [:print-meta :symbols :align :span :line :text :group :form :tag], :seen #{:align :group :print-meta :line :form :tag :symbols :text :span}}, :doc "Provides a pretty document serializer and pprint fn for Clojure/EDN forms.\n  See fipp.clojure for pretty printing Clojure code."}