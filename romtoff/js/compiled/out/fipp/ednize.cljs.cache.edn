;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name fipp.ednize, :imports nil, :requires {clojure.string clojure.string, s clojure.string}, :uses nil, :defs {record->tagged {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 21, :end-line 20, :column 7, :line 20, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/ednize.cljs"}, :name fipp.ednize/record->tagged, :variadic false, :file "resources/public/js/compiled/out/fipp/ednize.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, tagged-literal {:protocol-inline nil, :meta {:arglists (quote ([tag rep])), :end-column 21, :end-line 17, :column 7, :line 17, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/ednize.cljs"}, :name fipp.ednize/tagged-literal, :variadic false, :file "resources/public/js/compiled/out/fipp/ednize.cljs", :end-column 21, :method-params ([tag rep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag rep])), :test true}, pattern? {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 15, :end-line 13, :column 7, :line 13, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/ednize.cljs"}, :name fipp.ednize/pattern?, :variadic false, :file "resources/public/js/compiled/out/fipp/ednize.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, boolean? {:protocol-inline nil, :meta {:arglists (quote ([x])), :end-column 15, :end-line 9, :column 7, :line 9, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/ednize.cljs"}, :name fipp.ednize/boolean?, :variadic false, :file "resources/public/js/compiled/out/fipp/ednize.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, -edn {:protocol-inline nil, :meta {:arglists (quote ([x])), :doc nil, :protocol fipp.ednize/IEdn, :end-column 8, :end-line 6, :column 4, :line 6, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/ednize.cljs"}, :protocol fipp.ednize/IEdn, :name fipp.ednize/-edn, :variadic false, :file "resources/public/js/compiled/out/fipp/ednize.cljs", :end-column 8, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc nil, :test true}, IEdn {:meta {:protocol-info {:methods {-edn [[x]]}}, :protocol-symbol true, :doc "Perform a shallow conversion to an Edn data structure.", :end-column 18, :end-line 4, :column 14, :line 4, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/ednize.cljs"}, :protocol-symbol true, :name fipp.ednize/IEdn, :file "resources/public/js/compiled/out/fipp/ednize.cljs", :end-column 18, :column 1, :line 4, :protocol-info {:methods {-edn [[x]]}}, :info nil, :end-line 4, :impls #{}, :doc "Perform a shallow conversion to an Edn data structure.", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:fipp.ednize/TAGGED], :seen #{:fipp.ednize/TAGGED}}, :doc nil}