;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{eduction}, :name fipp.engine, :imports nil, :requires {deque fipp.deque, fipp.deque fipp.deque, clojure.string clojure.string, s clojure.string}, :uses nil, :defs {pprint-document {:protocol-inline nil, :meta {:arglists (quote ([document options])), :end-column 22, :end-line 231, :column 7, :line 231, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/engine.cljc"}, :name fipp.engine/pprint-document, :variadic false, :file "resources/public/js/compiled/out/fipp/engine.cljc", :end-column 22, :method-params ([document options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 2, :fn-var true, :arglists (quote ([document options])), :test true}, eduction {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xforms)], :arglists [[& xforms]], :arglists-meta (nil)}, :arglists (quote ([& xforms])), :end-column 24, :end-line 228, :column 16, :line 228, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/engine.cljc"}, :name fipp.engine/eduction, :variadic true, :file "resources/public/js/compiled/out/fipp/engine.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xforms)], :arglists [[& xforms]], :arglists-meta (nil)}, :method-params [(xforms)], :protocol-impl nil, :arglists-meta (nil), :column 10, :line 228, :end-line 228, :max-fixed-arity 0, :fn-var true, :arglists [[& xforms]], :test true}, format-nodes {:protocol-inline nil, :meta {:arglists (quote ([{:keys [width], :as options}])), :doc "Given printing options, returns a transducer which produces the fully\n  laid-out strings.", :end-column 19, :end-line 157, :column 7, :line 157, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/engine.cljc"}, :name fipp.engine/format-nodes, :variadic false, :file "resources/public/js/compiled/out/fipp/engine.cljc", :end-column 19, :method-params ([p__24858]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [width], :as options}])), :doc "Given printing options, returns a transducer which produces the fully\n  laid-out strings.", :test true}, annotate-begins {:protocol-inline nil, :meta {:arglists (quote ([{:keys [width], :as options}])), :doc "Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes.", :end-column 22, :end-line 87, :column 7, :line 87, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/engine.cljc"}, :name fipp.engine/annotate-begins, :variadic false, :file "resources/public/js/compiled/out/fipp/engine.cljc", :end-column 22, :method-params ([p__24848]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [width], :as options}])), :doc "Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes.", :test true}, update-right {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(deque f args)], :arglists [[deque f & args]], :arglists-meta (nil)}, :arglists (quote ([deque f & args])), :end-column 19, :end-line 84, :column 7, :line 84, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/engine.cljc"}, :name fipp.engine/update-right, :variadic true, :file "resources/public/js/compiled/out/fipp/engine.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(deque f args)], :arglists [[deque f & args]], :arglists-meta (nil)}, :method-params [(deque f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists [[deque f & args]], :test true}, annotate-rights {:protocol-inline nil, :meta {:arglists (quote ([rf])), :doc "A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout.", :end-column 22, :end-line 63, :column 7, :line 63, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/engine.cljc"}, :name fipp.engine/annotate-rights, :variadic false, :file "resources/public/js/compiled/out/fipp/engine.cljc", :end-column 22, :method-params ([rf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rf])), :doc "A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout.", :test true}, serialize {:protocol-inline nil, :meta {:arglists (quote ([doc])), :end-column 16, :end-line 12, :column 7, :line 12, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/engine.cljc"}, :name fipp.engine/serialize, :variadic false, :file "resources/public/js/compiled/out/fipp/engine.cljc", :end-column 16, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc])), :test true}, serialize-node {:meta {:end-column 25, :end-line 10, :column 11, :line 10, :file "/Users/andrei/work/romtoff/resources/public/js/compiled/out/fipp/engine.cljc"}, :file "resources/public/js/compiled/out/fipp/engine.cljc", :line 10, :column 1, :end-line 10, :end-column 25, :test true, :name fipp.engine/serialize-node}}, :require-macros nil, :cljs.analyzer/constants {:order [:hierarchy :default :op :text :else :node :pass :escaped :span :line :inline :break :group :begin :end :nest :offset :outdent :align :right :width :position :nodes :too-far], :seen #{:nest :align :outdent :group :else :offset :default :too-far :width :op :node :begin :break :nodes :line :right :escaped :position :pass :end :hierarchy :inline :text :span}}, :doc "See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing"}